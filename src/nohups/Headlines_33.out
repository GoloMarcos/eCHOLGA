Traceback (most recent call last):
  File "/exp/golo/github_repositories/eC-HGNN-OCL/src/main.py", line 102, in <module>
    embs = gnn_trainer.train_model(False)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/exp/golo/github_repositories/eC-HGNN-OCL/src/gnn_trainer.py", line 49, in train_model
    loss, loss_ocl, loss_rec, loss_nt, node_representation = self._train_model_one_epoch(relation_mask, relation_edge_index, node_type_labels, ocl_factor, rec_factor, nt_factor)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/exp/golo/github_repositories/eC-HGNN-OCL/src/gnn_trainer.py", line 30, in _train_model_one_epoch
    node_representation, pred_node_type = self.heterogeneous_model.get_gnn_model().encode(self.heterogeneous_model.get_graph_torch().embedding.float(), self.heterogeneous_model.get_graph_torch().edge_index)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/golo/miniconda3/envs/echolgat/lib/python3.12/site-packages/torch_geometric/nn/models/autoencoder.py", line 86, in encode
    return self.encoder(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/golo/.local/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/golo/.local/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/exp/golo/github_repositories/eC-HGNN-OCL/src/eCHOLGA.py", line 32, in forward
    x1 = nn.Tanh()(self.conv1(x, edge_index))
                   ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/golo/.local/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/golo/.local/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/golo/miniconda3/envs/echolgat/lib/python3.12/site-packages/torch_geometric/nn/conv/gcn_conv.py", line 263, in forward
    out = self.propagate(edge_index, x=x, edge_weight=edge_weight)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/tmp/torch_geometric.nn.conv.gcn_conv_GCNConv_propagate_lyph8exu.py", line 245, in propagate
    out = self.aggregate(
          ^^^^^^^^^^^^^^^
  File "/home/golo/miniconda3/envs/echolgat/lib/python3.12/site-packages/torch_geometric/nn/conv/message_passing.py", line 594, in aggregate
    return self.aggr_module(inputs, index, ptr=ptr, dim_size=dim_size,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/golo/miniconda3/envs/echolgat/lib/python3.12/site-packages/torch_geometric/experimental.py", line 117, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/golo/miniconda3/envs/echolgat/lib/python3.12/site-packages/torch_geometric/nn/aggr/base.py", line 139, in __call__
    raise e
  File "/home/golo/miniconda3/envs/echolgat/lib/python3.12/site-packages/torch_geometric/nn/aggr/base.py", line 131, in __call__
    return super().__call__(x, index=index, ptr=ptr, dim_size=dim_size,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/golo/.local/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/golo/.local/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/golo/miniconda3/envs/echolgat/lib/python3.12/site-packages/torch_geometric/nn/aggr/basic.py", line 22, in forward
    return self.reduce(x, index, ptr, dim_size, dim, reduce='sum')
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/golo/miniconda3/envs/echolgat/lib/python3.12/site-packages/torch_geometric/nn/aggr/base.py", line 185, in reduce
    return scatter(x, index, dim, dim_size, reduce)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/golo/miniconda3/envs/echolgat/lib/python3.12/site-packages/torch_geometric/utils/_scatter.py", line 75, in scatter
    return src.new_zeros(size).scatter_add_(dim, index, src)
           ^^^^^^^^^^^^^^^^^^^
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 20.00 MiB. GPU 0 has a total capacity of 23.67 GiB of which 75.19 MiB is free. Process 397903 has 19.19 GiB memory in use. Process 450015 has 2.15 GiB memory in use. Including non-PyTorch memory, this process has 1.65 GiB memory in use. Of the allocated memory 1.25 GiB is allocated by PyTorch, and 153.69 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
